#include "pch.h"

// removed windowsmanager because it was generated by AI, best we make our own actual windowmanager
#include <GLFW/glfw3.h>

#include <Input/InputManager.hpp>

//std::unordered_map<int, bool> InputManager::keyStates;
//std::unordered_map<int, bool> InputManager::mouseButtonStates;
//std::unordered_map<int, bool> InputManager::prevKeyStates;
//std::unordered_map<int, bool> InputManager::prevMouseButtonStates;
//double InputManager::mouseX = 0.0;
//double InputManager::mouseY = 0.0;
//double InputManager::scrollOffsetX = 0.0;
//double InputManager::scrollOffsetY = 0.0;

void InputManager::Initialize(GLFWwindow* window)
{
	glfwSetKeyCallback(window, KeyCallback);
	glfwSetMouseButtonCallback(window, MouseButtonCallback);
	glfwSetCursorPosCallback(window, CursorPositionCallback);
	glfwSetScrollCallback(window, ScrollCallback);
}

void InputManager::Update()
{
	RunTimeVar::input.prevKeyStates = RunTimeVar::input.keyStates;
	RunTimeVar::input.prevMouseButtonStates = RunTimeVar::input.mouseButtonStates;

	//WindowManager::PollEvents();
}

bool InputManager::GetKeyDown(int key)
{
	return RunTimeVar::input.keyStates[key] && !RunTimeVar::input.prevKeyStates[key];
}

bool InputManager::GetKey(int key)
{
	auto it = RunTimeVar::input.keyStates.find(key);
	return it != RunTimeVar::input.keyStates.end() && it->second;
}

bool InputManager::GetMouseButtonDown(int button)
{
	return RunTimeVar::input.mouseButtonStates[button] && !RunTimeVar::input.prevMouseButtonStates[button];
}

bool InputManager::GetMouseButton(int button)
{
	auto it = RunTimeVar::input.mouseButtonStates.find(button);
	return it != RunTimeVar::input.mouseButtonStates.end() && it->second;
}

double InputManager::GetMouseX()
{
	return RunTimeVar::input.mouseX;
}

double InputManager::GetMouseY()
{
	return RunTimeVar::input.mouseY;
}

bool InputManager::GetAnyKeyDown()
{
	for (const auto& keyState : RunTimeVar::input.keyStates) {
		if (GetKeyDown(keyState.first)) {
			return true;
		}
	}

	return false;
}

bool InputManager::GetAnyMouseButtonDown()
{
	for (const auto& mouseState : RunTimeVar::input.mouseButtonStates) {
		if (GetMouseButtonDown(mouseState.first)) {
			return true;
		}
	}

	return false;
}

bool InputManager::GetAnyInputDown()
{
	return GetAnyKeyDown() || GetAnyMouseButtonDown();
}
