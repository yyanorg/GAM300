name: Simple Debug Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  debug-build:
    runs-on: windows-2022
    
    strategy:
      fail-fast: false
      matrix:
        configuration: [Release]  # Just test Release first
        
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2
    
    - name: Check Project Structure
      run: |
        Write-Host "=== PROJECT STRUCTURE ===" -ForegroundColor Yellow
        cd Project
        Write-Host "Current directory: $PWD"
        Write-Host "Solution file:"
        Get-ChildItem -Filter "*.sln"
        Write-Host "Project files:"
        Get-ChildItem -Recurse -Filter "*.vcxproj" | Select-Object Name, Directory
    
    - name: Build Solution
      run: |
        Write-Host "=== BUILDING RELEASE ===" -ForegroundColor Yellow
        cd Project
        msbuild GAM300.sln /p:Configuration=Release /p:Platform=x64 /v:normal
        Write-Host "Build exit code: $LASTEXITCODE"
    
    - name: Find ALL Output Files
      run: |
        Write-Host "=== SEARCHING FOR OUTPUT FILES ===" -ForegroundColor Yellow
        cd Project
        
        Write-Host "ALL .exe files anywhere:"
        Get-ChildItem -Recurse -Filter "*.exe" -ErrorAction SilentlyContinue | ForEach-Object {
            Write-Host "  $($_.FullName.Replace($PWD, '.'))"
        }
        
        Write-Host "ALL .dll files anywhere:"
        Get-ChildItem -Recurse -Filter "*.dll" -ErrorAction SilentlyContinue | ForEach-Object {
            Write-Host "  $($_.FullName.Replace($PWD, '.'))"
        }
        
        Write-Host "x64 folder contents (if exists):"
        if (Test-Path "x64") {
            Get-ChildItem "x64" -Recurse -ErrorAction SilentlyContinue | ForEach-Object {
                Write-Host "  $($_.FullName.Replace($PWD, '.'))"
            }
        } else {
            Write-Host "  x64 folder does not exist"
        }
    
    - name: Check Alternative Output Locations
      run: |
        Write-Host "=== CHECKING ALTERNATIVE LOCATIONS ===" -ForegroundColor Yellow
        cd Project
        
        $locations = @("Engine", "Game", "Editor", "bin", "out", "Debug", "Release")
        foreach ($loc in $locations) {
            if (Test-Path $loc) {
                Write-Host "$loc folder contents:"
                Get-ChildItem $loc -Recurse -ErrorAction SilentlyContinue | Where-Object { 
                    $_.Extension -in @('.exe', '.dll', '.lib', '.pdb') 
                } | ForEach-Object {
                    Write-Host "  $($_.FullName.Replace($PWD, '.'))"
                }
            }
        }