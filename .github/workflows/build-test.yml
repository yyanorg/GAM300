name: Build GAM300 Engine

permissions:
  contents: read
  security-events: write
  actions: read

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-2022
    
    strategy:
      fail-fast: false
      matrix:
        configuration: [Debug, Release, EditorDebug, EditorRelease]
        
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2
      with:
        vs-version: latest
    
    - name: Setup Windows SDK
      uses: GuillaumeFalourd/setup-windows10-sdk-action@v2
      with:
        sdk-version: 22621
    
    - name: Verify Library Structure
      run: |
        Write-Host "Verifying Libraries folder structure..." -ForegroundColor Cyan
        cd Project
        
        $requiredPaths = @(
            "Libraries/Assimp/include",
            "Libraries/Assimp/lib/x64", 
            "Libraries/Assimp/bin/x64",
            "Libraries/freetype/include",
            "Libraries/freetype/release_dll/win64",
            "Libraries/glad/include/glad",
            "Libraries/glad/include/KHR",
            "Libraries/glfw/include/GLFW",
            "Libraries/glfw/lib-vc2022",
            "Libraries/glm/glm",
            "Libraries/ImGui"
        )
        
        $missing = @()
        foreach ($path in $requiredPaths) {
            if (!(Test-Path $path)) {
                $missing += $path
                Write-Warning "Missing: $path"
            } else {
                Write-Host "Found: $path" -ForegroundColor Green
            }
        }
        
        if ($missing.Count -gt 0) {
            Write-Error "Missing required library paths: $($missing -join ', ')"
            exit 1
        }
        
        Write-Host "Library verification complete!" -ForegroundColor Green
    
    - name: Cache Build Artifacts
      uses: actions/cache@v4
      with:
        path: |
          Project/Build/
          Project/Engine/Build/
          Project/Game/Build/
          Project/Editor/Build/
        key: ${{ runner.os }}-gam300-${{ matrix.configuration }}-${{ hashFiles('Project/**/*.vcxproj', 'Project/**/*.cpp', 'Project/**/*.h') }}
        restore-keys: |
          ${{ runner.os }}-gam300-${{ matrix.configuration }}-
          ${{ runner.os }}-gam300-
    
    - name: Build Solution
      run: |
        Write-Host "Building GAM300.sln with configuration: ${{ matrix.configuration }}" -ForegroundColor Cyan
        cd Project
        
        # Build entire solution - MSBuild will handle dependencies
        msbuild GAM300.sln /p:Configuration=${{ matrix.configuration }} /p:Platform=x64 /m /v:minimal /p:WarningLevel=3
        
        if ($LASTEXITCODE -ne 0) {
            Write-Error "Build failed for configuration ${{ matrix.configuration }}!"
            
            # Show more detailed error info
            Write-Host "Re-running with detailed verbosity..." -ForegroundColor Yellow
            msbuild GAM300.sln /p:Configuration=${{ matrix.configuration }} /p:Platform=x64 /v:detailed
            exit 1
        }
        
        Write-Host "Build successful for ${{ matrix.configuration }}!" -ForegroundColor Green
    
    - name: List Build Directory Contents
      run: |
        Write-Host "Build directory structure:" -ForegroundColor Cyan
        cd Project
        if (Test-Path "Build") {
            Get-ChildItem -Path "Build" -Recurse | Select-Object FullName | Format-Table -AutoSize
        } else {
            Write-Host "Build directory not found"
        }
    
    - name: Verify Build Outputs - Game Configuration
      if: matrix.configuration == 'Debug' || matrix.configuration == 'Release'
      run: |
        Write-Host "Verifying Game build outputs for ${{ matrix.configuration }}..." -ForegroundColor Cyan
        cd Project
        
        $expectedFiles = @(
            "Build/${{ matrix.configuration }}/Game.exe",
            "Build/${{ matrix.configuration }}/Engine.dll"
        )
        
        $missing = @()
        foreach ($file in $expectedFiles) {
            if (!(Test-Path $file)) {
                $missing += $file
                Write-Error "Missing output file: $file"
            } else {
                $size = [math]::Round((Get-Item $file).Length / 1MB, 2)
                Write-Host "Found: $file ($size MB)" -ForegroundColor Green
            }
        }
        
        if ($missing.Count -gt 0) {
            Write-Error "Missing build outputs: $($missing -join ', ')"
            exit 1
        }
    
    - name: Verify Build Outputs - Editor Configuration
      if: matrix.configuration == 'EditorDebug' || matrix.configuration == 'EditorRelease'
      run: |
        Write-Host "Verifying Editor build outputs for ${{ matrix.configuration }}..." -ForegroundColor Cyan
        cd Project
        
        $expectedFiles = @(
            "Build/${{ matrix.configuration }}/Editor.exe"
        )
        
        # In editor builds, Engine and Game might be static libraries
        $expectedLibs = @(
            "Build/${{ matrix.configuration }}/Engine.lib",
            "Build/${{ matrix.configuration }}/Game.lib"
        )
        
        foreach ($file in $expectedFiles) {
            if (!(Test-Path $file)) {
                Write-Error "Missing executable: $file"
                exit 1
            } else {
                $size = [math]::Round((Get-Item $file).Length / 1MB, 2)  
                Write-Host "Found executable: $file ($size MB)" -ForegroundColor Green
            }
        }
        
        foreach ($lib in $expectedLibs) {
            if (Test-Path $lib) {
                $size = [math]::Round((Get-Item $lib).Length / 1MB, 2)
                Write-Host "Found library: $lib ($size MB)" -ForegroundColor Green
            } else {
                Write-Warning "Library not found (may be linked differently): $lib"
            }
        }
    
    - name: Copy Required DLLs - Game Configuration
      if: matrix.configuration == 'Debug' || matrix.configuration == 'Release'
      run: |
        Write-Host "Copying required DLLs for Game..." -ForegroundColor Cyan
        cd Project
        
        # Copy Assimp DLL if Game uses it
        if (Test-Path "Libraries/Assimp/bin/x64/assimp-vc143-mt.dll") {
            Copy-Item "Libraries/Assimp/bin/x64/assimp-vc143-mt.dll" "Build/${{ matrix.configuration }}/" -Force
            Write-Host "Copied Assimp DLL" -ForegroundColor Green
        }
        
        # Copy GLFW DLL if using dynamic linking
        if (Test-Path "Libraries/glfw/lib-vc2022/glfw3.dll") {
            Copy-Item "Libraries/glfw/lib-vc2022/glfw3.dll" "Build/${{ matrix.configuration }}/" -Force  
            Write-Host "Copied GLFW DLL" -ForegroundColor Green
        }
        
        # Copy FreeType DLL if used
        if (Test-Path "Libraries/freetype/release_dll/win64/freetype.dll") {
            Copy-Item "Libraries/freetype/release_dll/win64/freetype.dll" "Build/${{ matrix.configuration }}/" -Force
            Write-Host "Copied FreeType DLL" -ForegroundColor Green
        }
    
    - name: Quick Smoke Test - Game
      if: matrix.configuration == 'Release'
      run: |
        Write-Host "Running Game smoke test..." -ForegroundColor Cyan
        cd Project/Build/Release
        
        # Test if Game.exe can start without crashing immediately
        $process = Start-Process -FilePath ".\Game.exe" -PassThru -WindowStyle Hidden
        Start-Sleep -Seconds 3
        
        if (!$process.HasExited) {
            Write-Host "Game started successfully and is running!" -ForegroundColor Green
            Stop-Process -Id $process.Id -Force -ErrorAction SilentlyContinue
        } elseif ($process.ExitCode -eq 0) {
            Write-Host "Game ran and exited cleanly" -ForegroundColor Green
        } else {
            Write-Warning "Game may have crashed. Exit code: $($process.ExitCode)"
            # Don't fail the build for this - it might be expected behavior
        }
    
    - name: Upload Game Build Artifacts
      if: matrix.configuration == 'Debug' || matrix.configuration == 'Release'
      uses: actions/upload-artifact@v4
      with:
        name: GameBuild-${{ matrix.configuration }}
        path: |
          Project/Build/${{ matrix.configuration }}/Game.exe
          Project/Build/${{ matrix.configuration }}/Engine.dll
          Project/Build/${{ matrix.configuration }}/*.dll
          Project/Build/${{ matrix.configuration }}/*.pdb
        retention-days: 7
        if-no-files-found: error
    
    - name: Upload Editor Build Artifacts  
      if: matrix.configuration == 'EditorDebug' || matrix.configuration == 'EditorRelease'
      uses: actions/upload-artifact@v4
      with:
        name: EditorBuild-${{ matrix.configuration }}
        path: |
          Project/Build/${{ matrix.configuration }}/Editor.exe
          Project/Build/${{ matrix.configuration }}/*.lib
          Project/Build/${{ matrix.configuration }}/*.pdb
        retention-days: 7
        if-no-files-found: error

  # Code analysis job
  code-analysis:
    runs-on: windows-2022
    needs: build
    # if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: cpp
        config: |
          paths:
            - Project/Engine/src
            - Project/Game/src  
            - Project/Editor/src
          paths-ignore:
            - Project/Libraries
            - Project/Editor/src/imgui
    
    - name: Build for CodeQL
      run: |
        cd Project
        msbuild GAM300.sln /p:Configuration=Release /p:Platform=x64 /m
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  # Build summary
  build-summary:
    runs-on: ubuntu-latest
    needs: build
    if: always()
    
    steps:
    - name: Generate Build Summary
      run: |
        echo "# GAM300 Build Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Configuration | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|---------------|--------|" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.build.result }}" == "success" ]]; then
          echo "| Debug | ✅ Success |" >> $GITHUB_STEP_SUMMARY
          echo "| Release | ✅ Success |" >> $GITHUB_STEP_SUMMARY  
          echo "| EditorDebug | ✅ Success |" >> $GITHUB_STEP_SUMMARY
          echo "| EditorRelease | ✅ Success |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎉 All configurations built successfully!" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Build | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "⚠️ Build failed. Check the logs above for details." >> $GITHUB_STEP_SUMMARY
        fi